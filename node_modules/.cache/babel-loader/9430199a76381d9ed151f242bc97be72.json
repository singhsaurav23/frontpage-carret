{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\carret\\\\proj\\\\profile\\\\src\\\\portfolio\\\\components\\\\Exchanges\\\\ExchangeList.js\",\n    _s = $RefreshSig$();\n\n// import { Fragment, useState } from \"react\";\n// import Card from \"../UI/Card\";\n// import Modal from \"../UI/Modal\";\n// import styles from \"./ExchangeList.module.css\";\n// import Button from \"../UI/Button\";\n// import del from \"./del.png\";\n// import edit from \"./edit.png\";\n// import Icon from \"../Holdings/Icon\";\n// import Exchange from \"./Exchange\";\n// const ExchangeList = (props) => {\n//   const [exchanges, setExchanges] = useState([]);\n//   const [clicked, setClicked] = useState(false);\n//   const [valid, setValid] = useState(true);\n//   const [disableOption, setDisableOption] = useState(false);\n//   const [fixedId, setId] = useState(\"\");\n//   const enterHandler = (objId) => {\n//     setId(objId);\n//     setClicked(true);\n//   };\n//   const newEnterHandler = () => {\n//     setClicked(true);\n//   };\n//   const onTapHandler = () => {\n//     setClicked(false);\n//   };\n//   const updateEx = async () => {\n//     //api/profiles\n//     const obj = exchanges.find((item) => item.id === fixedId);\n//     console.log(obj);\n//     await fetch(\"api/profiles\", {\n//       method: \"POST\",\n//       body: JSON.stringify(obj),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     });\n//   };\n//   const addHandler = async (ename, eApiKey, eApiSecret, subName) => {\n//     if (disableOption === true) {\n//       const obj = exchanges.find((item) => item.id === fixedId);\n//       obj.apiKey = eApiKey;\n//       obj.apiSecret = eApiSecret;\n//       obj.sub = subName;\n//       console.log(obj);\n//       await fetch(\"api/profiles/\", {\n//         method: \"PUT\",\n//         body: JSON.stringify(obj),\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n//       setExchanges(\n//         exchanges.map((item) =>\n//           item.id === fixedId\n//             ? {\n//                 ...item,\n//                 apiKey: eApiKey,\n//                 apiSecret: eApiSecret,\n//                 sub: subName,\n//               }\n//             : item\n//         )\n//       );\n//       setDisableOption(false);\n//       setClicked(false);\n//       return;\n//       //api/profiles\n//       // await fetch(\"api/profiles\", {\n//       //   method: \"PUT\",\n//       //   body: JSON.stringify(obj),\n//       //   headers: {\n//       //     \"Content-Type\": \"application/json\",\n//       //   },\n//       // });\n//     }\n//     setExchanges((prev) => {\n//       const updated = [...prev];\n//       if (valid) {\n//         updated.unshift({\n//           apiKey: eApiKey,\n//           apiSecret: eApiSecret,\n//           name: ename,\n//           sub: subName,\n//           id: Math.random().toString(),\n//         });\n//       }\n//       return updated;\n//     });\n//     setClicked(false);\n//     // var token;\n//     // await fetch(\"api/auth/token\")\n//     //   .then((response) => response.json())\n//     //   .then((json) => {\n//     //     console.log(json);\n//     //     token = json[\"token\"];\n//     //   });\n//     const tokens = props.tokenValue;\n//     const obj = {\n//       apiKey: eApiKey,\n//       apiSecret: eApiSecret,\n//       exchangeName: ename,\n//     };\n//     console.log(tokens);\n//     const toke = \"Bearer \";\n//     const tokenId = toke.concat(tokens.token);\n//     const res = await fetch(\"api/profiles\", {\n//       method: \"POST\",\n//       body: JSON.stringify(obj),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": tokenId,\n//       },\n//     });\n//     const dat = await res.json();\n//     if (dat[\"id\"] !== null) {\n//       setValid(true);\n//     } else {\n//       setValid(false);\n//     }\n//   };\n//   const deleteHandler = async (exchangeId) => {\n//     const obj = exchanges.find((item) => item.id === exchangeId);\n//     console.log(obj);\n//     await fetch(\"api/delete/<id>\", {\n//       method: \"PUT\",\n//       body: JSON.stringify(obj),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     });\n//     setExchanges((prev) => {\n//       const updated = prev.filter((exchange) => exchange.id !== exchangeId);\n//       return updated;\n//     });\n//   };\n//   // const editHandler = (exchangeId) => {\n//   //   deleteHandler(exchangeId);\n//   //   addHandler()\n//   // }\n//   return (\n//     <Card className={styles.cardBox}>\n//       <Fragment>\n//         <h2>Exchanges</h2>\n//         <ul>\n//           <li className={styles.firstli}>\n//             <div className={styles.firstDiv}>Exchange</div>\n//             <div className={styles.secDiv}>\n//               <div>Edit</div>\n//               <div>Delete</div>\n//             </div>\n//           </li>\n//           {exchanges.map((one) => (\n//             <li key={one.id}>\n//               <Exchange\n//                 data={one}\n//                 onAdd={enterHandler}\n//                 onDelete={deleteHandler}\n//                 disableSetter={setDisableOption}\n//               />\n//             </li>\n//           ))}\n//         </ul>\n//         {clicked && (\n//           <Modal\n//             onAddExchange={addHandler}\n//             onTap={onTapHandler}\n//             isDisabled={disableOption}\n//           />\n//         )}\n//         <Button onClick={newEnterHandler} className={styles.subButton}>\n//           Add Exchange\n//         </Button>\n//       </Fragment>\n//     </Card>\n//   );\n// };\n// export default ExchangeList;\nimport { Fragment, useState } from \"react\";\nimport Card from \"../UI/Card\";\nimport Modal from \"../UI/Modal\";\nimport styles from \"./ExchangeList.module.css\";\nimport Button from \"../UI/Button\";\nimport del from \"./del.png\";\nimport edit from \"./edit.png\";\nimport Icon from \"../Holdings/Icon\";\nimport Exchange from \"./Exchange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExchangeList = props => {\n  _s();\n\n  const [exchanges, setExchanges] = useState([]);\n  const [clicked, setClicked] = useState(false);\n  const [valid, setValid] = useState(true);\n  const [disableOption, setDisableOption] = useState(false);\n  const [fixedId, setId] = useState(\"\"); // const [dbId, setDbId] = useState(\"\");\n\n  const enterHandler = objId => {\n    setId(objId);\n    setClicked(true);\n  };\n\n  const newEnterHandler = () => {\n    setClicked(true);\n  };\n\n  const onTapHandler = () => {\n    setClicked(false);\n  };\n\n  const updateEx = async () => {\n    //api/profiles\n    const obj = exchanges.find(item => item.id === fixedId);\n    console.log(obj);\n    await fetch(\"api/profiles\", {\n      method: \"POST\",\n      body: JSON.stringify(obj),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n\n  const addHandler = async (ename, eApiKey, eApiSecret, subName) => {\n    if (disableOption === true) {\n      const obj = exchanges.find(item => item.dbid === fixedId);\n      obj.apiKey = eApiKey;\n      obj.apiSecret = eApiSecret;\n      obj.sub = subName;\n      console.log(obj);\n      const tokens = props.tokenValue;\n      console.log(tokens.token);\n      const toke = \"Bearer \";\n      const tokenId = toke.concat(tokens.token);\n      await fetch(`api/profiles/${fixedId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(obj),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": tokenId\n        }\n      });\n      setExchanges(exchanges.map(item => item.id === fixedId ? { ...item,\n        apiKey: eApiKey,\n        apiSecret: eApiSecret,\n        sub: subName\n      } : item));\n      setDisableOption(false);\n      setClicked(false);\n      return; //api/profiles\n      // await fetch(\"api/profiles\", {\n      //   method: \"PUT\",\n      //   body: JSON.stringify(obj),\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      //   },\n      // });\n    } // var token;\n    // await fetch(\"api/auth/token\")\n    //   .then((response) => response.json())\n    //   .then((json) => {\n    //     console.log(json);\n    //     token = json[\"token\"];\n    //   });\n\n\n    const tokens = props.tokenValue;\n    const obj = {\n      apiKey: eApiKey,\n      apiSecret: eApiSecret,\n      exchangeName: ename\n    };\n    console.log(tokens.token);\n    const toke = \"Bearer \";\n    const tokenId = toke.concat(tokens.token);\n    const res = await fetch(\"api/profiles\", {\n      method: \"POST\",\n      body: JSON.stringify(obj),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": tokenId\n      }\n    });\n    const dat = await res.json();\n    var dbId = \"\";\n\n    if (dat[\"id\"] !== null) {\n      dbId = dat[\"id\"];\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setExchanges(prev => {\n      const updated = [...prev];\n\n      if (valid) {\n        updated.unshift({\n          apiKey: eApiKey,\n          apiSecret: eApiSecret,\n          name: ename,\n          sub: subName,\n          id: Math.random().toString(),\n          dbid: dbId\n        });\n      }\n\n      return updated;\n    });\n    setClicked(false);\n  };\n\n  const deleteHandler = async exchangeId => {\n    const obj = exchanges.find(item => item.dbid === exchangeId);\n    console.log(obj);\n    const tokens = props.tokenValue;\n    console.log(tokens.token);\n    const toke = \"Bearer \";\n    const tokenId = toke.concat(tokens.token);\n    await fetch(`api/delete/${obj.dbid}`, {\n      method: \"PUT\",\n      body: JSON.stringify(obj),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": tokenId\n      }\n    });\n    setExchanges(prev => {\n      const updated = prev.filter(exchange => exchange.dbid !== exchangeId);\n      return updated;\n    });\n  }; // const editHandler = (exchangeId) => {\n  //   deleteHandler(exchangeId);\n  //   addHandler()\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: styles.cardBox,\n    children: /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Exchanges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.firstli,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.firstDiv,\n            children: \"Exchange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.secDiv,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), exchanges.map(one => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Exchange, {\n            data: one,\n            onAdd: enterHandler,\n            onDelete: deleteHandler,\n            disableSetter: setDisableOption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)\n        }, one.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), clicked && /*#__PURE__*/_jsxDEV(Modal, {\n        onAddExchange: addHandler,\n        onTap: onTapHandler,\n        isDisabled: disableOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: newEnterHandler,\n        className: styles.subButton,\n        children: \"Add Exchange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExchangeList, \"Bz2fDFw+A8dZ2BsbG19Q8MWnUmM=\");\n\n_c = ExchangeList;\nexport default ExchangeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExchangeList\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/carret/proj/profile/src/portfolio/components/Exchanges/ExchangeList.js"],"names":["Fragment","useState","Card","Modal","styles","Button","del","edit","Icon","Exchange","ExchangeList","props","exchanges","setExchanges","clicked","setClicked","valid","setValid","disableOption","setDisableOption","fixedId","setId","enterHandler","objId","newEnterHandler","onTapHandler","updateEx","obj","find","item","id","console","log","fetch","method","body","JSON","stringify","headers","addHandler","ename","eApiKey","eApiSecret","subName","dbid","apiKey","apiSecret","sub","tokens","tokenValue","token","toke","tokenId","concat","map","exchangeName","res","dat","json","dbId","prev","updated","unshift","name","Math","random","toString","deleteHandler","exchangeId","filter","exchange","cardBox","firstli","firstDiv","secDiv","one","subButton"],"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","sourcesContent":["// import { Fragment, useState } from \"react\";\r\n// import Card from \"../UI/Card\";\r\n// import Modal from \"../UI/Modal\";\r\n// import styles from \"./ExchangeList.module.css\";\r\n// import Button from \"../UI/Button\";\r\n// import del from \"./del.png\";\r\n// import edit from \"./edit.png\";\r\n// import Icon from \"../Holdings/Icon\";\r\n// import Exchange from \"./Exchange\";\r\n\r\n// const ExchangeList = (props) => {\r\n//   const [exchanges, setExchanges] = useState([]);\r\n//   const [clicked, setClicked] = useState(false);\r\n//   const [valid, setValid] = useState(true);\r\n//   const [disableOption, setDisableOption] = useState(false);\r\n//   const [fixedId, setId] = useState(\"\");\r\n\r\n//   const enterHandler = (objId) => {\r\n//     setId(objId);\r\n//     setClicked(true);\r\n//   };\r\n\r\n//   const newEnterHandler = () => {\r\n//     setClicked(true);\r\n//   };\r\n//   const onTapHandler = () => {\r\n//     setClicked(false);\r\n//   };\r\n//   const updateEx = async () => {\r\n//     //api/profiles\r\n//     const obj = exchanges.find((item) => item.id === fixedId);\r\n//     console.log(obj);\r\n//     await fetch(\"api/profiles\", {\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(obj),\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   const addHandler = async (ename, eApiKey, eApiSecret, subName) => {\r\n//     if (disableOption === true) {\r\n//       const obj = exchanges.find((item) => item.id === fixedId);\r\n//       obj.apiKey = eApiKey;\r\n//       obj.apiSecret = eApiSecret;\r\n//       obj.sub = subName;\r\n//       console.log(obj);\r\n//       await fetch(\"api/profiles/\", {\r\n//         method: \"PUT\",\r\n//         body: JSON.stringify(obj),\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//       });\r\n//       setExchanges(\r\n//         exchanges.map((item) =>\r\n//           item.id === fixedId\r\n//             ? {\r\n//                 ...item,\r\n//                 apiKey: eApiKey,\r\n//                 apiSecret: eApiSecret,\r\n//                 sub: subName,\r\n//               }\r\n//             : item\r\n//         )\r\n//       );\r\n\r\n//       setDisableOption(false);\r\n//       setClicked(false);\r\n//       return;\r\n//       //api/profiles\r\n//       // await fetch(\"api/profiles\", {\r\n//       //   method: \"PUT\",\r\n//       //   body: JSON.stringify(obj),\r\n//       //   headers: {\r\n//       //     \"Content-Type\": \"application/json\",\r\n//       //   },\r\n//       // });\r\n//     }\r\n//     setExchanges((prev) => {\r\n//       const updated = [...prev];\r\n//       if (valid) {\r\n//         updated.unshift({\r\n//           apiKey: eApiKey,\r\n//           apiSecret: eApiSecret,\r\n//           name: ename,\r\n//           sub: subName,\r\n//           id: Math.random().toString(),\r\n//         });\r\n//       }\r\n//       return updated;\r\n//     });\r\n//     setClicked(false);\r\n//     // var token;\r\n//     // await fetch(\"api/auth/token\")\r\n//     //   .then((response) => response.json())\r\n//     //   .then((json) => {\r\n//     //     console.log(json);\r\n//     //     token = json[\"token\"];\r\n//     //   });\r\n//     const tokens = props.tokenValue;\r\n//     const obj = {\r\n//       apiKey: eApiKey,\r\n//       apiSecret: eApiSecret,\r\n//       exchangeName: ename,\r\n//     };\r\n//     console.log(tokens);\r\n//     const toke = \"Bearer \";\r\n//     const tokenId = toke.concat(tokens.token);\r\n//     const res = await fetch(\"api/profiles\", {\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(obj),\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"Authorization\": tokenId,\r\n//       },\r\n//     });\r\n//     const dat = await res.json();\r\n//     if (dat[\"id\"] !== null) {\r\n//       setValid(true);\r\n//     } else {\r\n//       setValid(false);\r\n//     }\r\n//   };\r\n\r\n//   const deleteHandler = async (exchangeId) => {\r\n//     const obj = exchanges.find((item) => item.id === exchangeId);\r\n//     console.log(obj);\r\n//     await fetch(\"api/delete/<id>\", {\r\n//       method: \"PUT\",\r\n//       body: JSON.stringify(obj),\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//     });\r\n//     setExchanges((prev) => {\r\n//       const updated = prev.filter((exchange) => exchange.id !== exchangeId);\r\n//       return updated;\r\n//     });\r\n//   };\r\n\r\n//   // const editHandler = (exchangeId) => {\r\n//   //   deleteHandler(exchangeId);\r\n//   //   addHandler()\r\n//   // }\r\n//   return (\r\n//     <Card className={styles.cardBox}>\r\n//       <Fragment>\r\n//         <h2>Exchanges</h2>\r\n//         <ul>\r\n//           <li className={styles.firstli}>\r\n//             <div className={styles.firstDiv}>Exchange</div>\r\n//             <div className={styles.secDiv}>\r\n//               <div>Edit</div>\r\n//               <div>Delete</div>\r\n//             </div>\r\n//           </li>\r\n//           {exchanges.map((one) => (\r\n//             <li key={one.id}>\r\n//               <Exchange\r\n//                 data={one}\r\n//                 onAdd={enterHandler}\r\n//                 onDelete={deleteHandler}\r\n//                 disableSetter={setDisableOption}\r\n//               />\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         {clicked && (\r\n//           <Modal\r\n//             onAddExchange={addHandler}\r\n//             onTap={onTapHandler}\r\n//             isDisabled={disableOption}\r\n//           />\r\n//         )}\r\n//         <Button onClick={newEnterHandler} className={styles.subButton}>\r\n//           Add Exchange\r\n//         </Button>\r\n//       </Fragment>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// export default ExchangeList;\r\n\r\nimport { Fragment, useState } from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport Modal from \"../UI/Modal\";\r\nimport styles from \"./ExchangeList.module.css\";\r\nimport Button from \"../UI/Button\";\r\nimport del from \"./del.png\";\r\nimport edit from \"./edit.png\";\r\nimport Icon from \"../Holdings/Icon\";\r\nimport Exchange from \"./Exchange\";\r\n\r\nconst ExchangeList = (props) => {\r\n  const [exchanges, setExchanges] = useState([]);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [valid, setValid] = useState(true);\r\n  const [disableOption, setDisableOption] = useState(false);\r\n  const [fixedId, setId] = useState(\"\");\r\n  // const [dbId, setDbId] = useState(\"\");\r\n\r\n  const enterHandler = (objId) => {\r\n    setId(objId);\r\n    setClicked(true);\r\n  };\r\n\r\n  const newEnterHandler = () => {\r\n    setClicked(true);\r\n  };\r\n  const onTapHandler = () => {\r\n    setClicked(false);\r\n  };\r\n  const updateEx = async () => {\r\n    //api/profiles\r\n    const obj = exchanges.find((item) => item.id === fixedId);\r\n    console.log(obj);\r\n    await fetch(\"api/profiles\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(obj),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const addHandler = async (ename, eApiKey, eApiSecret, subName) => {\r\n    if (disableOption === true) {\r\n      const obj = exchanges.find((item) => item.dbid === fixedId);\r\n      obj.apiKey = eApiKey;\r\n      obj.apiSecret = eApiSecret;\r\n      obj.sub = subName;\r\n      console.log(obj);\r\n      const tokens = props.tokenValue;\r\n    console.log(tokens.token);\r\n    const toke = \"Bearer \";\r\n    const tokenId = toke.concat(tokens.token);\r\n      await fetch(`api/profiles/${fixedId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(obj),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": tokenId\r\n        },\r\n      });\r\n      setExchanges(\r\n        exchanges.map((item) =>\r\n          item.id === fixedId\r\n            ? {\r\n                ...item,\r\n                apiKey: eApiKey,\r\n                apiSecret: eApiSecret,\r\n                sub: subName,\r\n              }\r\n            : item\r\n        )\r\n      );\r\n\r\n      setDisableOption(false);\r\n      setClicked(false);\r\n      return;\r\n      //api/profiles\r\n      // await fetch(\"api/profiles\", {\r\n      //   method: \"PUT\",\r\n      //   body: JSON.stringify(obj),\r\n      //   headers: {\r\n      //     \"Content-Type\": \"application/json\",\r\n      //   },\r\n      // });\r\n    }\r\n    \r\n    // var token;\r\n    // await fetch(\"api/auth/token\")\r\n    //   .then((response) => response.json())\r\n    //   .then((json) => {\r\n    //     console.log(json);\r\n    //     token = json[\"token\"];\r\n    //   });\r\n    const tokens = props.tokenValue;\r\n    const obj = {\r\n      apiKey: eApiKey,\r\n      apiSecret: eApiSecret,\r\n      exchangeName: ename,\r\n    };\r\n    console.log(tokens.token);\r\n    const toke = \"Bearer \";\r\n    const tokenId = toke.concat(tokens.token);\r\n    const res = await fetch(\"api/profiles\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(obj),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": tokenId,\r\n      },\r\n    });\r\n    const dat = await res.json();\r\n    var dbId = \"\";\r\n    if (dat[\"id\"] !== null) {\r\n      dbId = dat[\"id\"]\r\n      setValid(true);\r\n    } else {\r\n      setValid(false);\r\n    }\r\n\r\n    setExchanges((prev) => {\r\n      const updated = [...prev];\r\n      if (valid) {\r\n        updated.unshift({\r\n          apiKey: eApiKey,\r\n          apiSecret: eApiSecret,\r\n          name: ename,\r\n          sub: subName,\r\n          id: Math.random().toString(),\r\n          dbid: dbId, \r\n        });\r\n      }\r\n      return updated;\r\n    });\r\n    setClicked(false);\r\n  };\r\n\r\n  const deleteHandler = async (exchangeId) => {\r\n    const obj = exchanges.find((item) => item.dbid === exchangeId);\r\n    console.log(obj);\r\n    const tokens = props.tokenValue;\r\n    console.log(tokens.token);\r\n    const toke = \"Bearer \";\r\n    const tokenId = toke.concat(tokens.token);\r\n    await fetch(`api/delete/${obj.dbid}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(obj),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": tokenId\r\n      },\r\n    });\r\n    setExchanges((prev) => {\r\n      const updated = prev.filter((exchange) => exchange.dbid !== exchangeId);\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  // const editHandler = (exchangeId) => {\r\n  //   deleteHandler(exchangeId);\r\n  //   addHandler()\r\n  // }\r\n  return (\r\n    <Card className={styles.cardBox}>\r\n      <Fragment>\r\n        <h2>Exchanges</h2>\r\n        <ul>\r\n          <li className={styles.firstli}>\r\n            <div className={styles.firstDiv}>Exchange</div>\r\n            <div className={styles.secDiv}>\r\n              <div>Edit</div>\r\n              <div>Delete</div>\r\n            </div>\r\n          </li>\r\n          {exchanges.map((one) => (\r\n            <li key={one.id}>\r\n              <Exchange\r\n                data={one}\r\n                onAdd={enterHandler}\r\n                onDelete={deleteHandler}\r\n                disableSetter={setDisableOption}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        {clicked && (\r\n          <Modal\r\n            onAddExchange={addHandler}\r\n            onTap={onTapHandler}\r\n            isDisabled={disableOption}\r\n          />\r\n        )}\r\n        <Button onClick={newEnterHandler} className={styles.subButton}>\r\n          Add Exchange\r\n        </Button>\r\n      </Fragment>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ExchangeList;"]},"metadata":{},"sourceType":"module"}